#!/usr/bin/env python3

"""
Download files from Soundcloud.
Requires a Soundcloud client id.
"""

import argparse
import random
import requests
import sys
import time
from os.path import expanduser

RESOLVE_URL = 'https://api.soundcloud.com/resolve?url={url}&client_id={id}'
CHUNK_SIZE = 1024 * 8


parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('-i', '--id', help='Soundcloud client id.')
parser.add_argument('-c', '--creds', default='~/.creds/soundcloud', help='File with Soundcloud client id.')
parser.add_argument('-v', '--verbose', action='store_const', const=True, default=False)
parser.add_argument('urls', metavar='URL', nargs='+', help='One or more Soundcloud urls.')
args = parser.parse_args()


class Logger(object):
    OK = ('\033[32m', 'OK')
    WARN = ('\033[33m', 'WARN')
    ERROR = ('\033[31m', 'ERROR')
    RESET = '\033[00m'

    @classmethod
    def _print(cls, level, msg):
        print('{}{:5}{} {}'.format(*level, cls.RESET, msg), file=sys.stderr)

    @classmethod
    def ok(cls, msg):
        cls._print(cls.OK, msg)

    @classmethod
    def warn(cls, msg):
        if args.verbose:
            cls._print(cls.WARN, msg)

    @classmethod
    def error(cls, msg):
        cls._print(cls.ERROR, msg)


def get_client_id(id=None, creds=None, **unused):
    if id:
        return id
    else:
        with open(expanduser(creds)) as f:
            return f.readline().strip()

def resolve(url, id):
    """
    Use resolve API to find file location and info.
    """
    time.sleep(random.random())
    response = requests.get(RESOLVE_URL.format(url=url, id=id))
    response.raise_for_status()
    return response.json()

def download(url, id, filename):
    """
    Use download API to get file and save to disk.
    """
    time.sleep(random.random())
    response = requests.get('{url}?client_id={id}'.format(url=url, id=id), stream=True)
    response.raise_for_status()

    size = int(response.headers.get('content-length'))
    progress = 0
    with open(filename, 'wb') as f:
        for chunk in response.iter_content(CHUNK_SIZE):
            if size:
                print(
                    '{progress:2}% {url} => {filename}'.format(
                        progress=int(progress / size * 100),
                        url=url,
                        filename=filename,
                    ),
                    end='\r',
                    file=sys.stderr
                )
            progress += f.write(chunk)

if __name__ == '__main__':
    id = get_client_id(**vars(args))

    for url in args.urls:
        try:
            info = resolve(url, id)
            if not info:
                raise Exception('No data for {}'.format(url))
        except Exception as e:
            print(e, file=sys.stderr)
            continue

        download_url = info.get('download_url') if info.get('downloadable') else None
        if not download_url and info.get('streamable'):
            download_url = info.get('stream_url')
            Logger.warn('{} not directly downloadable, getting stream url instead.'.format(url))

        if not download_url:
            Logger.error('No download url for {}'.format(url))
            continue
        title = info.get('title', next(filter(None, reversed(url.split('/'))))).replace('/', '_')
        format = info.get('original_format', 'mp3')
        filename = '{title}.{format}'.format(title=title, format=format)

        try:
            download(download_url, id, filename)
            Logger.ok('{url} => {filename}'.format(url=url, filename=filename))
        except Exception as e:
            print(e, file=sys.stderr)
